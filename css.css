/* 
⭐️css 적용방법⭐️
1. 내부 스타일시트 ; html head 태그 사이에 style 태그를 넣어 작성
2. 외부 스타일시트 ; 별도의 파일에 css 문서를 작성하고 불러오기 link rel=#$%^&
3. 인라인 스타일 ; html 태그 안에 속성을 직접 작성, 권장하지 않음!
우선순위: 인라인 > 내부 스타일시트 > 외부 스타일시트 > 브라우저 디자인

⭐️css는 선택자와 선언부로 구성⭐️
선택자 (selector) : 디자인을 적용하고자 하는 html요소
선언부 (declaration) : 콜론: 으로 구분되어진 다수의 항목을 포함
각 선언은 항상 세미콜론;으로 끝나며 선언블록은 {중괄호}로 묶음

⭐️셀렉터⭐️
: 기본 셀렉터에는 .클래스, #아이디, <태그>가 있음
,를 이용해 셀렉터를 나열하면 해당 셀렉터들에 동일한 속성을 부여할 수 있다
1. 클래스 : ex) .🍔 => html에서 🍔라는 클래스를 갖는 영역 선택
2. 아이디 : ex) #🍔 => html에서 🍔라는 아이디를 갖는 영역 선택
3. * : * {*&^%$} => 문서내 모든 요소 선택
4. 태그 : ex) p => 문서내 모든 <p> 태그 영역 선택
5. 태그, 태그 : ex) div, p => 모든 <div> 와 <p> 태그 영역 선택
6. 태그 태그 : ex) div p => <div> 태그 안에 있는 모든 <p> 태그 영역 선택

⭐️속성⭐️
1. 텍스트 속성
    - color : 글자색 지정
    - text-align : 주어진 영역에서 글자의 정렬 방식을 지정 (left, center, right)

2. 폰트 속성
    - font-family : 폰트의 이름과 유형을 지정하는 속성, 나열된 순서대로 폰트가 적용
    - font-style : 폰트의 스타일을 지정 (normal, italic, underline 등)
    - font-fize : 폰트의 크기를 지정 (px, %, em, rem 등)
    - font-weight : 폰트의 두께를 지정 (normal, bold, bolder 등)
    - font-variant : 폰트의 변형을 지정
 
3. 정렬 속성
    - text-align : 요소내 텍스트의 정렬
    - vertical-align : 인라인 혹은 테이블 셀에서 수직 정렬

4. 링크 속성
    : 하이퍼링크를 만들기 위한 <a>태그에 적용할 수 있는 속성
    *가상셀렉터
    a:link = 방문한적 없는 기본 링크
    a:visited = 방문한 링크
    a:hover = 마우스가 링크 위에 올라갔을 때
    a:active = 링크를 클릭했을 때
    
5. 컬러 속성
    - color: red 텍스트로 지정
    - color: #ff0000 컬러코드로 지정
    - color: rgb(255,0,0) rgb로 지정

6. 배경 속성
    - background-color : 배경색 지정
    - background-image : 배경 이미지 지정(상대경로, 절대경로, url사용가능)
    - background-repeat : 이미지 반복
    - background-position : 이미지의 위치를 지정
    - background-attachment : 이미지의 스크롤이나 고정을 지정



⭐️박스모델⭐️
html문서의 구성요소들은 기본적으로 박스형태로 정의

    1. 박스개요
    :박스 모델은 테두리(border) 내용(content), 안쪽 여백(padding) 바깥쪽 여백(margin) 네가지로 구성되며 
    각 요소는 상 하 좌 우 네 영역을 개별적으로 설정할 수 있다

    - border box:  박스를 둘러싼 테두리 영역
    - contents box: 콘텐츠 영역으로 텍스트 및 이미지의 실제 영역
    - margin box: 박스의 외부 영역으로 바로 앞 박스와의 여백
    - padding box: 테두리와 콘텐츠 사이의 안쪽 여백

    2. 박스크기
    :박스요소에 크기를 지정하면 기본적으로 ❗️콘텐츠영역❗️에 적용 (box-sizing: border-box 로 변경해 지정할 수도 있음)
    실제 박스의 크기는 border, margin, padding을 모두 더해야 하기 때문에 박스들을 적절히 배치하기 위해선 이들의 크기가 함께 고려되어야 함

    3. border
    - border-width: 테두리의 두께를 지정하는 속성, 상하좌우를 개별적으로 조절가능, 상하 좌우를 묶어서 조절 가능
    - border-style: 테두리 모양을 지정하는 속성, 실선 점선 이중선 등 사용가능하며 상하좌우 모든 다른 모양으로 조절 가능
    - border-color: 테두리 색상을 지정하는 속성
    - border-radius: 테두리의 모서리를 둥글게 만드는 속성, px % 등의 단위를 이용해 조절 가능

    4. margin 속성
    : 박스와 인접 요소간의 여백을 말하며 박스간의 적절한 배치를 위해 사용할 수 있으며 박스를 가운데 정렬하기 위해 사용하기도 함
    - margin: auto: 브라우저가 자동으로 마진을 조정한다
    - margin: inherit: 부모 요소의 마진을 상속받는다

⭐️레이아웃⭐️
: 레이아웃은 화면의 배치를 말한다
기본적으로 박스의 배치 방법을 결정하는 position이 있으며 나란히 배치되는 박스 콘텐츠들을 지정하기 위해 float, display 속성 등이 사용됨
    1. 그리드 시스템 (Grid system)
    : 화면을 테이블과 유사하게 가로, 세로의 격자로 나누는 것을 말한다
    2. 컨테이너 (container)
    : 컨테이너는 다른 물건을 담을 수 있는 그릇의 의미를 가짐 => 다른 구성요소를 포함할 수 있는 박스 영역

⭐️position⭐️
:박스 구성요소를 배치하기 위한 속성
어떤 position 속성을 사용하냐에 따라 위치가 달라짐
    - posotion: static : position속성의 기본값, 나열한 순서대로(왼->오) 배치, float을 이용해 좌우로 배치할 수 있음
    - posotion: Relative : 나열한 순서대로 배치되지만 top, right, bottom, left 속성을 사용해 원하는 위치를 지정할 수 있음
    - posotion:  Absolute : top, right, bottom, left 속성값을 이용해 원하는 요소를 원하는 위치에 배치할 수 있음
                            이때 기준위치는 가장 가까운 상위 요소 중 position: relative 인 요소
                            상위요소가 없다면 브라우저 화면의 좌측 상단을 기준으로 설정됨
    - posotion:  Fixed : absolute처럼 좌표로 위치를 결정하지만 기준이 부모요소가 아닌 브라우저창이며 페이지를 스크롤 하더라도 고정되어 같은 위치를 유지
    - posotion: z-index : 박스들이 중첩되는 경우 박스들의 수직 위치를 조정하기 위한 속성 (박스를 앞으로 보내거나 뒤로 보내거나)
                        z-index값이 작을수록 아래에 배치되며 -인 경우 기준 콘텐츠의 아래쪽을 의미
                        

⭐️float / display⭐️
: float: 요소를 화면 위에 떠있는 형식으로 배치, 좌측(float:left) or 우측(float:right)부터 정렬되는 박스 콘텐츠를 배열할 수 있음                        
: clear: float 속성이 더이상 유용하지 않다고 알려주는 속성으로 기본상태로 되돌리려면 clear:both 사용
float:left => clear:left; // float:right=> clear:right;

" display: 요소를 보여주는 방식을 지정. 콘텐츠를 안 보이게 할 수도 있고 float을 대체해 콘텐츠를 나란히 배치하는데 사용하기도 함
    - display: none : 보이지 않음 (visibilit:hidden과 유사하지만, 영역 자체가 사라짐)
    - display: block: 블록 박스
    - display: inline: 인라인 박스
    - display: inline-block: block 과 inline의 중간 상태
    inline 속성을 가지면서(다른 콘텐츠와 나란히 배치), block의 속성(크기 지정 가능)


⭐️박스요소 정렬⭐️
1. 블럭 요소 가운데 정렬 = > margin :auto;
2. 블럭 요소 좌우 정렬 = > position: absolute; right: n px 등등)
3. 블럭 요소 수직 정렬 => padding 속성으로 박스의 안쪽 위 아래 여백을 동일하게 지정
4. 이미지 가운데 정렬 => 부모 요소의 속성에 text-align: center; or <img display:block> margin:auto;   


⭐️복합 셀렉터⭐️
부모요소와 자식요소간의 관계, 상속, 가상클래스 등

1. 상속: 특정 속성들이 부모요소로부터 자식요소로 전달되는 개념 ex) 부모 요소의 색상이 red라면 자식도 red 속성을 물려받음
모든 속성이 상속되지는 않는다. ex) margin은 상속x
=> 상속을 이용하면 코드의 중복성을 줄여줘 생산성을 높일 수 있음. 유지 보수가 편하고 재활용이 용이

2. 셀렉터 조합: 원하는 요소를 선택하기 위해 셀렉터를 결합하는 것
-후손(Descendant) 손택자: selector A selector B
selector A 의 후손 selector B를 선택. A 요소 아래에 있는 모든 B 요소가 해당
-자식(Child) 선택자: selector A > selector B
selector A의 직접적인 자식인 selector B를 선택. A요소 아래에 있는 모든 B를 선택하되 B가 다른 요소의 자식이면 안됨
-인접(Adjacent Sibling) 형제 선택자: selector A + selector B
A와 가장 인접한 형제요소 B에 속성 적용. A와 B는 같은 부모 요소를 가지고 있어야 하며 B요소 중에서 A에 가장 인접한 B만 선택됨
-일반(General Sibling) 형제 선택자: selector A ~ selector B
A요소의 형제인 모든 B를 선택. A+B와 달리 A이후에 오는 모든 B가 선택됨

3. 가상셀렉터: 가상 클래스와 가상 엘리먼트가 있으며 선택된 요소에 특별한 상태 혹은 특정 부분을 선택할 수 있는 셀렉터
-가상클래스(pseudo class): 선택된 요소의 특정 상태에 동작하는 셀렉터
⬇️많이 사용되는 가상 클래스⬇️
:active 링크를 마우스로 클릭했을 때
:hover 마우스가 해당 요소의 위로 올라간 경우
:link 방문하지 않은 모든 링크를 선택
:focus 인풋 태그에서 해당 요소가 마우스 포커스를 가진 경우
:checked 인풋 태그에서 체크박스가 체크되었을 때
:disabled 인풋 태그의 상태가 disabled인 경우, disabled속성 적용시
:enabled 인풋 태그의 상태가 enabled인 경우
:first-child 해당 요소의 첫 번째 자식 요소를 선택
:last-child 해당 요소의 마지막 자식 요소를 선택
:nth-child(n) 해당 요소의 n번째 자식 요소를 선택

-가상 엘리먼트(pseudo element): 선택된 요소의 특정 위치에 동작하는 셀렉터 ex) 앞, 뒤, 첫 글자, 첫 줄 등
⬇️많이 사용되는 가상 엘리먼트⬇️
::after 선택된 요소 다음 위치
::before 선택된 요소 앞 위치
::first-letter 선택된 요소의 텍스트 내용중 첫 번째 글자
::first-line 선택된 요소의 텍스트 내용중 첫 번째 줄
::selection 선택된 요소에서 텍스트가 선택된 영역

⭐️flex box⭐️
: flex-box를 사용하면 요소의 크기와 순서를 유연하게 배치할 수 있으며 정렬, 방향, 순서, 크기 등을 유연하게 조절 가능
복잡한 구현이 필요한 레이아웃 구성도 비교적 쉽게 가능
-적용 방법: 정렬하려는 요소의 부모요소 display속성을 flex로 지정
flex-box는 부모요소인 flex-container에 정의하는 속성과 자식 요소인 flex-item에 정의하는 속성으로 구분됨

👉flex-container : 전체적인 정렬이나 흐름에 관련된 속성을 정의함
*flex-direction: 왼쪽에서 오른쪽, 위에서 아래 방향이 기본이며 각각에 대해 역방향(reverse) 설정도 가능
row: left→right (기본값)
row-reverse: right→left
column: top→bottom
column-reverse: bottom→top

flex-wrap: 기본적으로 item들을 하나의 라인에 배치될 수 있도록 설정. 화면 크기에 따라 여러 라인에 배치되거나 역방향으로 배치 가능
wrap: 기본값으로 화면 크기에 따라 여러라인에 배치
nowrap: 하나의 라인에 모든 item을 배치 (기본값)
wrap-reverse: 아래쪽에서 위쪽으로 여러 라인에 배치

justify-content: item 을 정렬하는 방식을 지정.
(기본값이 row 인 경우)
flex-start, flex-end => 축의 시작 or 종료 위치로 부터 정렬
center => 중앙 정렬
space-between => 첫 번째 item은 왼쪽 마지막 item은 오른쪽에 정렬되고 나머지 item을 사이에 정렬
space-around => item 왼쪽 및 오른쪽 공간을 균등하게 배분
space-evenly => 모든 item을 동일한 공간으로 배분

align-items
stretch => 기본값으로 컨테이너를 모두 채워 정렬 
flex-start, flex-end => 축의 시작 또는 종료 위치로 부터 정렬
center => 수직축의 중간에 요소들을 배치
baseline => 베이스라인 정렬

align-content: 여러 라인에 배치된 item들을 수직 정렬하는 방법 지정
stretch => 기본값으로 컨테이너 전체 높이에 맞게 늘어나 모든 item 배치
flex-start, flex-end => 전체 item을 축의 시작 또는 종료 위치로 부터 정렬
center => 전체 item을 하나의 묶음으로 봤을 때 중앙 정렬
space-between => 첫 번째 item은 위쪽, 마지막 item은 아래쪽에 정렬. 나머지 item을 사이에 정렬
space-around => item들의 위쪽 및 아래쪽 공간을 균등하게 배분

👉flex-item: 자식요소의 크기나 순서에 관련된 속성을 정의
order: item들의 정렬 순서를 지정. 0을 기본 값으로 양수와 음수로 item별로 개별 우선순위 지정이 가능
동일한 우선순위를 가질 경우 진행 방향에 따라 배치됨
flex-grow, shrink, basis: 아이템들의 너비에 대한 증감 비율을 설정. 0을 기본값으로 특정 단위 없이 지정된 값들의 비율에 따라 너비가 증가되는 구조
-basis: 아이템의 공간배분전 기본 크기로 auto인 경우 width, height로 크기 지정 가능
-flex-shrink: 아이템이 감소하는 비율을 설정, item이 가변너비가 아니거나 0이면 효과 없음
-flex-basis: 아이템이 증가하는 비율을 설정
flex: item의 너비를 설정하는 단축 속성
순서대로 grow, shrink, basis값을 부여, 기본값은 0 1 auto
grow값은 필수값, 나머지는 생략이 가능하다













*/